#define _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_DEPRECATE  
#define _CRT_NONSTDC_NO_DEPRECATE
#include<stdio.h>
#include<string.h>
#include"Server.h"
/*array to store transactions history*/
ST_transaction_t array_of_transactions[255] = { 0 };
/*pointer for transactions data*/
ST_transaction_t* ptrtoTransaction = array_of_transactions;

ST_accountsDB_t accountsDB[255]=
{
	{8000.0,RUNNING,"1863547896321456"},
	{2000.0,BLOCKED,"7896541233698524"},
	{8000.0,RUNNING,"1111222233334444"},
	{10000.0,BLOCKED,"1463978521479652"},
	{3000.0,RUNNING,"4444555566667777"},
	{9000.0,BLOCKED,"1789654123698745"},
	{5000.0,RUNNING,"1478456321789635"},
	{8500.0,BLOCKED,"7891233579514589"},
	{7500.0,RUNNING,"9853674129875634"},
	{1000.0,BLOCKED,"7856941236987456"}
};
/*global pointer to access the data base*/
ST_accountsDB_t* ptrtoDatabase= accountsDB; //used to compare PAN 

/*global pointer to carry the address of account*/
ST_accountsDB_t* ptrtoaccount; //carry address of chosen account


/*counter to be incremented with every transaction process*/
uint32_t Sequence_number = 1;
/*create global variable to store transaction status*/
EN_transState_t Transaction_status;

EN_transState_t recieveTransactionData(ST_transaction_t* transData)
{
	EN_transState_t Error_type;
	uint8_t valid_account;
	uint8_t blocked_account;
	float is_amount_available;
	valid_account=isValidAccount(&transData->cardHolderData,ptrtoDatabase);
	if (valid_account != 0)
	{
		printf("Fraud card! \n");
		Error_type = FRAUD_CARD;
	}
	blocked_account = isBlockedAccount(ptrtoaccount);
	if (blocked_account != 0)
	{
		printf("Declined Stolen Card! \n");
		Error_type = DECLINED_STOLEN_CARD;
	}
	is_amount_available = isAmountAvailable(&transData->terminalData, ptrtoaccount);
	if (is_amount_available != 0)
	{
		printf("Declined Insuffecient fund \n");
		Error_type = DECLINED_INSUFFECIENT_FUND;
	}

	ptrtoaccount->balance -= transData->terminalData.transAmount;
	Error_type = APPROVED;
	Transaction_status = Error_type;
	printf("Transaction has completed successfully! \n");
	return Error_type;

}

EN_serverError_t isValidAccount(ST_cardData_t* cardData,ST_accountsDB_t* accountRefrence)
{
	EN_serverError_t Error_type = 0;
	uint8_t result;
	uint8_t flag=2;
	ptrtoCard = cardData;
	/*check the PAN from terminal and compare it with PANs in data base*/
	for (int i = 0; i < 10; i++)
	{
		result = strcmp(ptrtoCard->primaryAccountNumber,ptrtoDatabase->primaryAccountNumber);
		if (result == 0)
		{
			printf("Account found! \n");
			Error_type = SERVER_OK;
			ptrtoDatabase++;
			flag--;
			ptrtoaccount = ptrtoDatabase;
			return SERVER_OK;
			break;
		}
		
	}
	if (flag == 2)
	{
		printf("Account Not found! \n");
		
		Error_type = ACCOUNT_NOT_FOUND;
	}
	return Error_type;
}
EN_serverError_t isBlockedAccount(ST_accountsDB_t* accountRefrence)
{
	EN_serverError_t Error_type = 0;
	
	if (accountRefrence->state == 0)
	{
		printf("Account is active! \n");
		Error_type = SERVER_OK;
	}
	else
	{
		printf("Account is blocked! \n");
		Error_type = BLOCKED_ACCOUNT;
	}
	return Error_type;
}
EN_serverError_t isAmountAvailable(ST_terminalData_t* termData, ST_accountsDB_t* accountRefrence)
{
	EN_serverError_t Error_type;
	if ((termData->transAmount) > (accountRefrence->balance))
	{
		printf("Low balance in the account! \n");
		Error_type = LOW_BALANCE;
	}
	else
	{
		printf("Balance is valid! \n");
		Error_type = SERVER_OK;
	}
	return Error_type;
}

EN_serverError_t saveTransaction(ST_transaction_t* transData)
{
	transData->transState = Transaction_status;
	transData->transactionSequenceNumber = Sequence_number;
	strcpy((array_of_transactions[Sequence_number].cardHolderData.cardHolderName), transData->cardHolderData.cardHolderName);
	strcpy((array_of_transactions[Sequence_number].cardHolderData.cardExpirationDate), transData->cardHolderData.cardExpirationDate);
	strcpy((array_of_transactions[Sequence_number].cardHolderData.primaryAccountNumber), transData->cardHolderData.primaryAccountNumber);

	strcpy((array_of_transactions[Sequence_number].terminalData.transactionDate), transData->terminalData.transactionDate);
	array_of_transactions[Sequence_number].terminalData.transAmount = transData->terminalData.transAmount;
	array_of_transactions[Sequence_number].transactionSequenceNumber = transData->transactionSequenceNumber;
	array_of_transactions[Sequence_number].transState = transData->transState;
	Sequence_number++;


	return SERVER_OK;
}


